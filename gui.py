from __future__ import annotations

import streamlit as st
import json
from pathlib import Path
import pandas as pd # Needed for st.map

# --- Configuration ---
# Assuming data.json and screenshots/ are in the same directory as gui.py
DATA_FILE = Path("data.json")
SCREENSHOTS_DIR = Path("screenshots")

# --- Helper Functions ---

@st.cache_data # Cache the data loading to improve performance
def load_data(json_path: Path) -> list[dict] | None:
    """Loads analysis data from the specified JSON file."""
    if not json_path.exists():
        st.error(f"Error: Data file not found at '{json_path}'. Please run base_analyzer.py first.")
        return None
    try:
        data = json.loads(json_path.read_text())
        if not isinstance(data, list):
            st.error(f"Error: Data in '{json_path}' is not a valid list.")
            return None
        # Sort data by base name for consistent display
        data.sort(key=lambda x: x.get("name", ""))
        return data
    except json.JSONDecodeError:
        st.error(f"Error: Could not decode JSON from '{json_path}'. File might be corrupted.")
        return None
    except Exception as e:
        st.error(f"An unexpected error occurred loading data: {e}")
        return None

def find_screenshot(base_name: str, analyst_index: int) -> str | None:
    """Tries to find a screenshot for a given base and analyst index."""
    # Assumes screenshots are JPGs converted from the original PNGs
    # Searches for base_analystXX_*.jpg - might find multiple zoom levels, takes first.
    # A more robust solution would store the exact screenshot filename in data.json.
    pattern = f"{base_name}_analyst{analyst_index:02d}_*.jpg"
    try:
        if not SCREENSHOTS_DIR.is_dir():
            return None # Don't warn if the whole directory is missing
        found_files = list(SCREENSHOTS_DIR.glob(pattern))
        if found_files:
            # Return the path as a string for st.image
            return str(found_files[0].resolve())
    except Exception as e:
        # Log potential errors during search, but don't crash the GUI
        print(f"Warning: Error searching for screenshot {pattern}: {e}")
    return None

# --- Main GUI Application ---

st.set_page_config(page_title="Base Analyzer GUI", layout="wide", initial_sidebar_state="expanded")

# Sidebar for navigation/controls
with st.sidebar:
    st.header("Mission Control")
    st.write("Select Target Dossier:")

# Load data
all_records = load_data(DATA_FILE)

if not all_records:
    st.warning("Could not load analysis data. Run the base analyzer script first.")
    st.stop() # Stop execution if no data

# --- Prepare data for selection ---
# Use base_name as the primary identifier
base_name_map = {record.get("name", f"Record_{i}"): record for i, record in enumerate(all_records)}
base_names_list = list(base_name_map.keys())

if not base_names_list:
    st.warning("No valid base records found in the data file.")
    st.stop()

# --- Base Selection ---
selected_base_name = st.sidebar.selectbox(
    "Target Base:",
    options=base_names_list,
    label_visibility="collapsed" # Hide the label above selectbox
    )

# Get the full record for the selected base
selected_record = base_name_map.get(selected_base_name)

# --- Display Area ---
st.title("üéØ Base Analysis Dossier")
st.markdown("---")


if selected_record:
    st.header(f" dossier: {selected_record.get('name', 'N/A')}")

    # --- Section 1: Vitals and Commander Assessment ---
    col1, col2 = st.columns([1, 2]) # Ratio for columns

    with col1:
        st.subheader("üìå Base Vitals")
        st.markdown(f"**Country:** {selected_record.get('country', 'Unknown')}")
        coords = selected_record.get('original_coords')
        if coords and isinstance(coords, list) and len(coords) == 2:
            st.markdown(f"**Coordinates:** `Lat {coords[0]:.6f}, Lon {coords[1]:.6f}`")
            # Display Map centered on the coordinates
            map_df = pd.DataFrame({'lat': [coords[0]], 'lon': [coords[1]]})
            try:
                st.map(map_df, zoom=11, use_container_width=True) # Adjust zoom as needed
            except Exception as map_error:
                st.warning(f"Could not display map: {map_error}")
        else:
            st.markdown("**Coordinates:** Not Available")

    with col2:
         st.subheader("üìù Commander's Final Assessment")
         commander_report = selected_record.get('commander_report', 'Not Available')
         # Check if the report content is an error message generated by our script
         if isinstance(commander_report, str) and commander_report.startswith("Error generating commander report:"):
             st.error(f"Commander's report generation failed:\n{commander_report}")
         # Check if the report is just empty or not a string
         elif not commander_report or not isinstance(commander_report, str):
             st.warning("Commander's report is missing or invalid.")
         else:
             # Use markdown with replacements for better display
             formatted_report = commander_report.replace('**', ' BOLD ').replace('---','\n---\n') # Temp replace markdown bold
             formatted_report = formatted_report.replace('\n','  \n') # Ensure markdown line breaks
             formatted_report = formatted_report.replace(' BOLD ', '**') # Restore markdown bold
             st.markdown(formatted_report)


    st.markdown("---")
    st.header("üëÅÔ∏è‚Äçüó®Ô∏è Analyst Intelligence Feed")
    st.caption("Review individual analyst reports and associated imagery.")

    analyst_reports = selected_record.get('analysts', [])
    if not analyst_reports:
        st.warning("No analyst reports found for this base.")
    else:
        # Create tabs for each analyst report for cleaner navigation
        tab_titles = [f"Analyst {i+1}" for i in range(len(analyst_reports))]
        tabs = st.tabs(tab_titles)

        for i, report_data in enumerate(analyst_reports):
            with tabs[i]:
                st.subheader(f"Report: Analyst {i+1}")

                col_report, col_screenshot = st.columns(2) # Split view for report and image

                with col_report:
                    # Check if this analyst entry is an error dictionary
                    if isinstance(report_data, dict) and "error" in report_data:
                        st.error(f"**Analyst {i+1} Error:** {report_data['error']}")
                        st.text_area("Raw Response Received:", report_data.get('raw_response', ''), height=100, disabled=True)
                    # Otherwise, assume it's a valid dictionary report
                    elif isinstance(report_data, dict):
                        st.markdown("**Findings:**")
                        findings = report_data.get('findings', [])
                        if findings:
                            st.markdown('\n'.join([f"- {f}" for f in findings]))
                        else:
                            st.markdown("_No findings listed._")

                        st.markdown("**Analysis:**")
                        analysis_text = report_data.get('analysis', '_No analysis provided._')
                        st.markdown(analysis_text.replace('\n', '  \n')) # Ensure line breaks

                        st.markdown("**Further Analysis Points:**")
                        follow_up = report_data.get('things_to_continue_analyzing', [])
                        if follow_up:
                             st.markdown('\n'.join([f"- {item}" for item in follow_up]))
                        else:
                            st.markdown("_None listed._")

                        action = report_data.get('action', 'N/A')
                        st.markdown(f"**Recommended Action:** `{action}`")
                    else:
                         st.warning("Analyst report data is not in the expected dictionary format.")

                with col_screenshot:
                     st.subheader("Imagery Reviewed")
                     # Try to find the corresponding screenshot
                     screenshot_path = find_screenshot(selected_base_name, i) # Index 'i' is the analyst_idx
                     if screenshot_path:
                         try:
                             st.image(screenshot_path, caption=f"Imagery for Analyst {i+1}", use_column_width=True)
                         except Exception as img_error:
                             st.error(f"Could not load image {Path(screenshot_path).name}: {img_error}")
                     else:
                         # Don't show error if screenshots dir is missing, just if file not found
                         if SCREENSHOTS_DIR.is_dir():
                            st.info(f"Screenshot for Analyst {i+1} not found.")
                         else:
                            st.warning(f"Screenshots directory '{SCREENSHOTS_DIR}' not found.")


else:
    # This case should ideally not be reached if base_names_list is populated
    st.error("Could not find the selected base record in the loaded data.")